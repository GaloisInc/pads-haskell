K refactor base types into modules, Prelude
K getting vcard example to run
K lifting String -> (Foo, String) functions to pads parsers
K define base types for Haskell 
   URL, IP address types
   ASCII versions of Int8, Int16, Int32, and Int64, and Integer
   Binary versions of Int64 and Word64
K review remaining source code files
K create list of supported base types


Ideas:
-- user-supplied default values for structured types?
-- simplified data structure syntax for user-developed tools
-- allow users to capture positions in value fields
-- Allow users to define their own literals by making an instance of LitParse function

{-mylit = Trans (foo, bar)foo :: B.ByteString -> (Maybe a, B.ByteString)bar :: a -> B.ByteString-}

J printing
J generating default values
J parsing expressions
J improve syntax errors on bad pads parse

. paper outline
    level of integration of haskell language principles
    benefits from using haskell
	forced us to take seriously parameterized datatypes
	  then lots of things are definable in pads
    erasure -> haskell type declarations
    vcard example
    pun for characters for regular expressions
    adding type checking during code generation for TH
    show how to get existing haskell types in pads descriptions


****************
D finish getting first examples to work
D reviewing galois comments
D adding partition declarations to source language
D change internal constructor names to avoid clashes
