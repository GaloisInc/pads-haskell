{-# LANGUAGE TemplateHaskell, NamedFieldPuns, ScopedTypeVariables, RecordWildCards #-}

module Language.Pads.CodeGen where

import Language.Pads.Syntax as PS
import Language.Pads.MetaData
import Language.Pads.Generic
import Language.Pads.PadsParser
import Language.Pads.CoreBaseTypes
import Language.Pads.TH
import qualified Language.Pads.Errors as E
import qualified Language.Pads.Source as S


import Language.Haskell.TH as TH
import Language.Haskell.TH.Syntax

import Data.Data
import Data.Char
import qualified Data.Map as M

type BString = S.RawStream


{- Code generation routines -}
make_pads_declarations :: [PadsDecl] -> Q [Dec]
make_pads_declarations ds = fmap concat (mapM make_pads_declaration ds)

make_pads_declaration :: PadsDecl -> Q [Dec]
make_pads_declaration (PadsDecl (p_name, pat, padsTy)) = do
   let ty_name    = getTyName    p_name
   let md_ty_name = getMDName    p_name
   let parse_name = getParseName p_name
   let print_name = getPrintBSName p_name
   let arg_info_opt = mergeMaybe pat (fmap patToTy pat)
   let (ty_decl, md_ty_decls, md_ty) = genRepMDDecl padsTy ty_name md_ty_name  -- Generate reprsentation and meta-data decls for padsTy
   let padsInstance   :: [Dec] = genPadsInstance       parse_name    ty_name md_ty             arg_info_opt
   parseM :: [Dec]            <- genPadsParseM         parse_name    ty_name md_ty_name padsTy arg_info_opt
   parseS :: [Dec]            <- genPadsParseS  p_name parse_name    ty_name md_ty_name padsTy arg_info_opt
   printBS :: [Dec]           <- genPadsPrintBS p_name print_name    ty_name md_ty_name padsTy arg_info_opt
   return ([ty_decl]    ++
           md_ty_decls  ++ 
           padsInstance ++  
           parseM       ++ 
           parseS )

{- Functions for generating representation and meta-data declarations and meta-data type. -}

genRepMDDecl :: PadsTy -> Name -> Name -> (TH.Dec, [TH.Dec], TH.Type)
genRepMDDecl ty ty_name md_ty_name = case ty of
  Precord _ tys -> genRepMDDeclStruct ty_name md_ty_name tys
  Punion  _ tys -> genRepMDDeclUnion  ty_name md_ty_name tys
  Pswitch _ _ caseTys -> genRepMDDeclUnion ty_name md_ty_name (map (\(e,ty) -> ty) caseTys)
  other -> let (rep,md) = genRepMDTy other
           in  (mk_newTyD ty_name rep, [mk_TySynD md_ty_name md], md)

{- Generate type and meta-data representations. -}
genRepMDTy ::  PadsTy -> (TH.Type, TH.Type)
genRepMDTy ty = case ty of
  Plit  _      -> (ConT ''(),  ConT ''Base_md)
  Pname p_name -> (ConT (getTyName p_name), ConT (getMDName p_name))
  Ptuple tys   -> genRepMDTuple tys
  Pline ty     -> genRepMDTy ty
  Pmaybe ty    -> genRepMDMaybe ty
  Plist ty sep term -> genRepMDList ty
  Ptry ty      -> genRepMDTy ty                  -- rep and md for try type are same as for underlying type
  Papp ty arg  -> genRepMDTy ty
  Ptrans tySrc tyDest exp -> genRepMDTy tyDest    -- rep and md for transform are rep and md for destination type
  Ptypedef pat ty pred    -> genRepMDTypedef ty
  Precord _ tys ->   error "Records can only appear at the top level."

{- Generate a representation and meta-data for a list:
  type list = [ty] 
  type list_md = (baseMD, [ty_md])
-}
genRepMDList :: PadsTy -> (TH.Type, TH.Type)
genRepMDList ty =
  let (rep_orig, md_orig) = genRepMDTy ty
      rep_ty    = TH.AppT TH.ListT rep_orig
      md_nested = TH.AppT TH.ListT  md_orig
      md_ty = tyListToTupleTy [ConT ''Base_md, md_nested]    
  in (rep_ty, md_ty)

{- Generate a representation and meta-data type for a typedef. -}
genRepMDTypedef :: PadsTy -> (TH.Type, TH.Type)
genRepMDTypedef ty = 
  let (rep_ty, md_orig) = genRepMDTy ty
      md_ty = tyListToTupleTy [ConT ''Base_md, md_orig]    -- md is a pair of a base md for the typedef and the underlying md.
  in (rep_ty, md_ty)

{- Generate a representation and meta-data type for maybe. -}
genRepMDMaybe :: PadsTy -> (TH.Type, TH.Type)
genRepMDMaybe ty = 
  let (rep_orig, md_orig) = genRepMDTy ty
      rep_ty = AppT (ConT ''Maybe) rep_orig                 -- rep is Maybe ty where ty is rep of nested type
      md'_ty = AppT (ConT ''Maybe) md_orig                  -- underyling md is Maybe of md of nested type
      md_ty  = tyListToTupleTy [ConT ''Base_md, md'_ty ]    -- md is a pair of a base md for the maybe and the underlying md.
  in (rep_ty, md_ty)

{- Generate a representation and meta-data type for a struct. -}
genRepMDDeclStruct :: Name -> Name -> [(Maybe String, PadsTy, Maybe TH.Exp)] -> (TH.Dec, [TH.Dec], TH.Type)
genRepMDDeclStruct ty_name md_ty_name fields = 
  let (vsts', md_vsts') = unzip $ flattenMaybeList $ map genRepMDField fields
      derives      = [''Show, ''Eq, ''Typeable, ''Data, ''Ord]
      ty_con       = TH.RecC ty_name vsts'
      ty_decl      = TH.DataD [] ty_name [] [ty_con] derives
      inner_md_name = getStructInnerMDName ty_name   -- ty name is the same as the declared pads type name
      imd_con       = TH.RecC inner_md_name md_vsts'
      imd_decl      = TH.DataD [] inner_md_name [] [imd_con] derives   -- declaration of line for nested components
      imd_ty        = TH.ConT inner_md_name
      md_ty         = tyListToTupleTy [ConT ''Base_md, imd_ty]
      md_decl       = mk_TySynD md_ty_name md_ty
  in if length vsts' == 0 then 
        error ("Error: Record " ++ (show ty_name) ++ " must contain at least one named field.")
     else 
        (ty_decl, [imd_decl,md_decl], md_ty)
 

{- Generate a representation and meta-data type for a union. -}
genRepMDDeclUnion :: Name -> Name -> [(Maybe String, PadsTy, Maybe TH.Exp)] -> (TH.Dec, [TH.Dec], TH.Type)
genRepMDDeclUnion ty_name md_ty_name branches = 
  let (cons', md_cons') = unzip $ map genRepMDUnion branches
      derives      = [''Show, ''Eq, ''Typeable, ''Data, ''Ord]
      ty_decl      = TH.DataD [] ty_name [] cons' derives
      inner_md_name = getStructInnerMDName ty_name   -- ty name is the same as the declared pads type name
      imd_decl      = TH.DataD [] inner_md_name [] md_cons' derives   -- declaration of line for nested components
      imd_ty        = TH.ConT inner_md_name
      md_ty         = tyListToTupleTy [ConT ''Base_md, imd_ty]
      md_decl       = mk_TySynD md_ty_name md_ty
  in if length cons' == 0 then 
        error ("Error: Union " ++ (show ty_name) ++ " must contain at least one named field.")
     else 
        (ty_decl, [imd_decl,md_decl], md_ty)
 
{-
  runQ [d| data FooUnion = UBar Int | Baz String |]
  [DataD [] FooUnion [] [NormalC UBar [(NotStrict,ConT GHC.Types.Int)],NormalC Baz [(NotStrict,ConT GHC.Base.String)]] []]
-}
genRepMDUnion :: (Maybe String, PadsTy, Maybe TH.Exp) -> (TH.Con, TH.Con)
genRepMDUnion (Nothing, ty, exp)  = error "Unions are required to have names for all branches."
genRepMDUnion (Just str, ty, exp) = let
   (rep_ty, md_ty) = genRepMDTy ty
   rep_arg = if rep_ty == ConT ''() then [] else [(TH.NotStrict,  rep_ty)]
   in (TH.NormalC (getBranchNameU   str) rep_arg,
       TH.NormalC (getBranchMDNameU str) [(TH.NotStrict, md_ty)])

type VST = (TH.Name, TH.Strict, TH.Type)
genRepMDField :: (Maybe String, PadsTy, Maybe TH.Exp) -> Maybe (VST, VST)
genRepMDField (Nothing,  ty, exp)  = Nothing
genRepMDField (Just str, ty, exp) = let
   (rep_ty, md_ty) = genRepMDTy ty
   in Just ((getFieldName   str, TH.NotStrict, rep_ty),
            (getFieldMDName str, TH.NotStrict, md_ty))

{- Generate a representation and meta-data types for a tuple -}
genRepMDTuple :: [PadsTy] -> (TH.Type, TH.Type)
genRepMDTuple tys = 
  let (r_tys, md_tys) = unzip (  filter (\(r_t,md_t) -> r_t /= ConT ''()) (map genRepMDTy tys))
      ty =  case r_tys of          -- Construct rep type for a tuple.
             []   -> ConT ''()     -- Tuple contained no non-singleton types, so its rep is the unit type.
             [ty] -> ty            -- Tuple contains one non-singleton type T, so its rep type is just T
             (r_ty:r_tys') ->      -- Rep is tuple of non-singleton types T.
                 tyListToTupleTy r_tys
      md_ty_nested = case md_tys of  
                      []      -> ConT ''Base_md   -- Tuple contains no types, so its nested pd is just a base pd
                      [md_ty] -> md_ty            -- Tuple contains a single type, so its nested pd is just the pd of the type
                      otherwise -> tyListToTupleTy md_tys
     {- Pd of a tuple is a pair of a base pd and a tuple of pds for each element in the tuple. -}
      md_ty = tyListToTupleTy [(ConT ''Base_md), md_ty_nested]
  in
      (ty, md_ty)

genPadsInstance parse_name ty_name md_ty mpat_info = 
  let (inst, parsePP) = case mpat_info of
                          Nothing -> (AppT (AppT (ConT ''Pads) (ConT ty_name)) md_ty,   -- Pads RepTy MDTy
                                      mkName "parsePP")
                          Just (p,arg_ty) -> 
                                     (AppT 
                                        (AppT (AppT (ConT ''Pads1) arg_ty) (ConT ty_name)) 
                                        md_ty,   -- Pads Arg RepTy MDTy
                                      mkName "parsePP1")
      parsePP_method = ValD (VarP parsePP) (NormalB (VarE parse_name)) []
  in [InstanceD [] inst [parsePP_method]]

{- This generates a type-specific name for the parseS function by redirecting to the generic function. -}
genPadsParseS :: String -> Name -> Name -> Name -> PadsTy -> Maybe(TH.Pat, TH.Type) -> Q [Dec]
genPadsParseS p_name parse_name rep_name pd_name padsTy mpat_info = return [sigD, funD]
  where
       parseSName  = getParseSName p_name
       stringTy    = ConT ''String
       padsPairTy  = AppT (AppT (TupleT 2) (ConT rep_name)) (ConT pd_name)
       resultTy    = AppT (AppT (TupleT 2) padsPairTy) stringTy
       core_ty     = arrowTy stringTy resultTy
       (bodyE, ty) = case mpat_info of
                      Nothing -> (VarE 'parseS, core_ty)
                      Just (pat,pat_ty) -> (LamE [pat] (AppE (VarE 'parseS1) (patToExp pat)),
                                            arrowTy pat_ty core_ty)
       sigD = SigD parseSName ty
       funD = ValD (VarP parseSName) (NormalB bodyE ) []
   


genPadsParseM :: Name -> Name -> Name -> PadsTy -> Maybe (TH.Pat, TH.Type) -> Q [Dec]
genPadsParseM parse_name rep_name pd_name padsTy mpat_info = do 
   let core_ty = AppT (ConT ''PadsParser) (AppT (AppT (TupleT 2) (ConT rep_name)) (ConT pd_name))
   core_bodyE <- genParseBody rep_name pd_name padsTy
   let (bodyE,ty) = case mpat_info of
                     Nothing -> (core_bodyE, core_ty)
                     Just (pat,pat_ty) -> ( LamE [pat] core_bodyE,
                                            arrowTy pat_ty core_ty)
   let sigD = SigD parse_name ty
   let funD = ValD (VarP parse_name) (NormalB bodyE) []
   return [sigD, funD]

wrapRep :: Name -> PadsTy -> TH.Exp -> TH.Exp
wrapRep repN ty repE = case ty of
  Precord _ _ -> repE
  Punion  _ _ -> repE
  Pswitch _ _ _ -> repE
  otherwise   -> AppE  (ConE repN) repE

{-
 Generate body of parseM function, which has the form:
  do (rep,md) <- rhsE
     return (Rep rep, md)
-}

genParseBody :: Name -> Name -> PadsTy -> Q TH.Exp
genParseBody repN mdN ty = do
   repName     <- genRepName 
   mdName      <- genMdName 
   rhsE        <- parseE ty 
   let (repE,repP) = genPE repName
   let (mdE, mdP)  = genPE mdName
   let doParseS    = BindS (TupP [repP,mdP]) rhsE
   let frepE       = wrapRep repN ty repE 
   let resultE     = TupE [frepE,mdE]
   let finalS      = NoBindS (AppE (VarE 'return) resultE)
   return (DoE [doParseS, finalS])

{- Given a PadsTy ty, return the haskell expression that parses ty. -}
parseE :: PadsTy -> Q TH.Exp
parseE ty = case ty of
  Plit  PS.EorL        -> return       (VarE(getParseName "PeorLit"))                           
  Plit  PS.EofL        -> return       (VarE(getParseName "PeofLit"))                           
  Plit  PS.VoidL       -> return       (VarE(getParseName "PvoidLit"))            
  Plit  l              -> return (AppE (VarE 'litParse) (litToExp l))
  Pname p_name   -> return (VarE (getParseName p_name))
  Ptuple tys     -> mkParseTuple tys
  Precord str fields   -> mkParseRecord str fields
  Punion  str branches -> mkParseUnion  str branches
  Pswitch str exp branches -> mkParseSwitch  str exp branches
  Plist ty sep term    -> mkParseList ty sep term
  Ptry  ty       -> mkParseTry ty
  Pline ty       -> mkParseLine ty
  Pmaybe ty      -> mkParseMaybe ty
  Papp ty argE   -> mkParseTyApp ty argE
  Ptrans tySrc tyDest exp -> mkParseTyTrans tySrc tyDest exp
  Ptypedef pat ty pred -> mkParseTyTypedef pat ty pred

{-
  do { (rep,md_orig) <- parseTy
       let pat = rep
       let ty_md = if pred then Base_md {numErrors = numErrors md_orig, errInfo = Nothing }
                          else Base_md {numErrors = 1 + numErrors md_orig, errInfo = Just "Typedef predicate failed." }
       return (rep, (b_md,md_orig))
-}

mkParseTyTypedef' :: TH.Pat -> PadsTy -> TH.Exp -> Q TH.Exp
mkParseTyTypedef' pat tyBase pred = do
  baseE <- parseE tyBase
  let baseEQ = return baseE
  let predQ  = return (TH.LamE [pat, TH.VarP (TH.mkName "rep"), TH.VarP (TH.mkName "md")] pred)    -- abstract on bound variables
  {- Why can't I define buildError and getLocOpt outside of the quasi-quote? -}
  [| do (b_rep, b_md @ Base_md{numErrors = b_errors, errInfo = b_errInfo} ) <- $baseEQ 
        let getLocOpt errInfo = case errInfo of 
                            Nothing -> Nothing
                            Just e -> E.position e
        let buildError pred n errInfo = if n == 0    then Nothing
                                  else if pred then Just (E.ErrInfo {msg = E.FUnderlyingTypedefFail, position = getLocOpt errInfo})
                                  else              Just (E.ErrInfo {msg = E.FPredicateFailure,      position = getLocOpt errInfo})
        let (predVal, totErrors) = if $predQ b_rep b_rep b_md    -- apply to bind values to bound variables.
                                      then (True, b_errors) else (False, 1+b_errors)
        let tdef_md = Base_md {numErrors = totErrors, errInfo = buildError predVal totErrors b_errInfo }

        return (b_rep, (tdef_md,b_md)) |]

mkParseTyTypedef :: TH.Pat -> PadsTy -> TH.Exp -> Q TH.Exp
mkParseTyTypedef pat tyBase rawPredE = do
  baseE <- parseE tyBase
  let predE  = TH.LamE [pat, TH.VarP (TH.mkName "md")] rawPredE    -- abstract on bound variables: given name and "md"
  return (AppE (AppE (VarE 'parseConstraint) baseE) predE)


mkParseTyTrans :: PadsTy -> PadsTy -> TH.Exp -> Q TH.Exp
mkParseTyTrans tySrc tyDest exp = do
  srcE <- parseE tySrc
  let srcEQ = return srcE
  let expQ  = return exp
  [| do begin_loc <- getLoc
        src_result <- $srcEQ
        end_loc <- getLoc
        let src_pos = S.locsToPos begin_loc end_loc
        let (toDst,toSrc) = $expQ
        return (toDst src_pos src_result) |]

mkParseTyApp :: PadsTy -> TH.Exp -> Q TH.Exp
mkParseTyApp ty argE = do
  parseFnE <- parseE ty            -- XXX should add type checking to ensure that ty is expecting an argument
  return (AppE parseFnE argE) 

{-
The representation of Pline ty is the same as the representation for ty.
The meta-data structure of a Pline ty is the same as the meta-data structure for ty.
TODO: Report error if underlying type has no representation. 
-}

mkParseTry :: PadsTy -> Q TH.Exp
mkParseTry ty = do
   rhsE <- parseE ty
   return (AppE (VarE 'parseTry) rhsE)

mkParseLine :: PadsTy -> Q TH.Exp
mkParseLine ty = do
   rhsE <- parseE ty
   return (AppE (VarE 'parseLine) rhsE)

mkParseMaybe :: PadsTy -> Q TH.Exp 
mkParseMaybe ty = do
  rhsE <- parseE ty
  return (AppE (VarE 'parseMaybe) rhsE)

mkParseList :: PadsTy -> (Maybe PadsTy) -> (Maybe TermCond) -> Q TH.Exp
mkParseList ty sep term = do 
  rhsE <- parseE ty
  case (sep,term) of 
    (Nothing,  Nothing) -> return (AppE (VarE 'parseListNoTermNoSep)   rhsE)
    (Just sep, Nothing) -> do sepE <- parseE sep
                              return (AppE (AppE (VarE 'parseListNoTermSep) sepE) rhsE)
    (Nothing,  Just (LengthTC lenE)) ->  return (AppE (AppE (VarE 'parseListTermLengthNoSep) lenE) rhsE)
    (Just sep, Just (LengthTC lenE)) ->  do sepE <- parseE sep
                                            return (AppE (AppE (AppE (VarE 'parseListTermLengthSep) lenE) sepE) rhsE)
    (Nothing,  Just (TyTC term    ))  -> do termE <- parseE term
                                            return (AppE (AppE (VarE 'parseListTermNoSep) termE) rhsE)
    (Just sep, Just (TyTC term    ))  -> do sepE <- parseE sep
                                            termE <- parseE term
                                            return (AppE (AppE (AppE (VarE 'parseListTermSep) sepE) termE) rhsE)

mkParseSwitch :: String -> TH.Exp -> [(TH.Pat, (Maybe String, PadsTy, Maybe TH.Exp))] -> Q TH.Exp
mkParseSwitch str testE pat_branches = let
  (pats, branches) = unzip pat_branches
  in do parseEs <- mkParseBranches str branches
        let pat_parses = zip pats parseEs
        let matches = map (\(pat,exp) -> Match pat (NormalB exp) []) pat_parses
        return (CaseE testE matches)


mkParseUnion :: String -> [(Maybe String, PadsTy, Maybe TH.Exp)] -> Q TH.Exp
mkParseUnion str branches = do
  parseEs     <- mkParseBranches str branches   
  return (AppE (VarE 'choiceP) (ListE parseEs))       -- choiceP [parse1, ..., parsen]

mkParseBranches :: String -> [(Maybe String, PadsTy, Maybe TH.Exp)] -> Q [TH.Exp]
mkParseBranches str branches = mapM (mkParseBranch str) branches

mkParseBranch :: String -> (Maybe String, PadsTy, Maybe TH.Exp) -> Q TH.Exp
mkParseBranch str (Nothing, padsTy, predM) = error ("Union ("++ str ++ ") branch is missing a name.")
mkParseBranch str (Just name, padsTy, predM) = do
   let repName  = getBranchNameL   name
   let mdName   = getBranchMDNameL name
   bmdName1     <- genBMdName 
   bmdName2     <- genBMdName 
   let (repE,  repP)  = genPE repName
   let ( mdE,  mdP)   = genPE mdName
   let (bmd1E, bmd1P) = genPE bmdName1
   let (bmd2E, bmd2P) = genPE bmdName2
   rhsE        <- parseE padsTy
   case (predM,padsTy) of
    (Just pred, Plit l) -> error ("Union "++ str ++ ": literal branch can't have a predicate.")
    (Nothing,   Plit l) -> let
       stmtPrs = BindS (TupP [repP,mdP]) rhsE                                     -- (rep, md) <- parse
       frepE   = TH.ConE (getBranchNameU   name)                                  -- . inject value into data type: Foo 
       imdE    = TH.AppE (TH.ConE (getBranchMDNameU name))  mdE                   -- . inject md into data type: Foo_md md
       fmdE    = TupE [mdE,  imdE]                                                -- . build final md: (md, Foo_md md)
       resultE = TupE [frepE,fmdE]                                                -- . build final result: (Foo, (md, Foo_md md))
       stmtRet = NoBindS (AppE (VarE 'mdReturn) resultE)                            -- return (Foo, (md, Foo_md md))
       in return (TH.DoE [stmtPrs,stmtRet])
    (Nothing, _) -> let
       stmtPrs = BindS (TupP [repP,mdP]) rhsE                                     -- (rep, md) <- parse
       stmtGmd = LetS [ValD bmd1P (NormalB (AppE (VarE 'get_md_header) mdE)) []]  -- let mbd1 = get_md_header md
       frepE   = TH.AppE (TH.ConE (getBranchNameU   name)) repE                   -- . inject value into data type: Foo rep
       imdE    = TH.AppE (TH.ConE (getBranchMDNameU name))  mdE                   -- . inject md into data type: Foo_md md
       fmdE    = TupE [bmd1E,imdE]                                                -- . build final md: (bmd1, Foo_md md)
       resultE = TupE [frepE,fmdE]                                                -- . build final result: 
       stmtRet = NoBindS (AppE (VarE 'mdReturn) resultE)                            -- return (Foo rep, (bmd1, Foo_md md))
       in return (TH.DoE [stmtPrs,stmtGmd,stmtRet])
    (Just pred,_) -> let
       stmtPrs = BindS (TupP [repP,mdP]) rhsE                                     -- (rep,md) <- parse
       stmtGmd = LetS [ValD bmd1P (NormalB (AppE (VarE 'get_md_header) mdE)) []]  -- let mbd1 = get_md_header md
       predTestE = TH.CondE pred bmd1E (AppE (VarE 'addPredFailureMD) bmd1E)      -- . build predicate test 
       stmtPred  = LetS [ValD bmd2P (NormalB predTestE)  []]                      -- let mbd2 = if pred then bmd1 else addPredFailureMD bmd1
       frepE   = TH.AppE (TH.ConE (getBranchNameU   name)) repE                   -- . inject value into data type: Foo rep
       imdE    = TH.AppE (TH.ConE (getBranchMDNameU name))  mdE                   -- . inject md into data type:    Foo_md md
       fmdE    = TupE [bmd2E,imdE]                                                -- . build final md:              (mbd2, Foo_md md)
       resultE = TupE [frepE,fmdE]                                                -- . build final result           (Foo rep, (md2, Foo_md md))
       stmtRet = NoBindS (AppE (VarE 'mdReturn) resultE)                            -- return (Foo rep, (md2, Foo_md md))
       in return (TH.DoE [stmtPrs,stmtGmd,stmtPred,stmtRet])                      
{- 
Invariants: literal can't have a field name or a predicate; no field name, no predicate
   stmts to parse each field of a record
   do
    (field_name, field_name_raw_md) <- parse_1             -- if field_name exists, not a literal, predicate
    let raw_bmd_1 = get_md_header field_name_raw_md
    let bmd_1 = if pred_1 then raw_bmd_1
                else addPredFailureMD raw_bmd_1
    let field_name_md = replace_md_header field_name_raw_md bmd_1
    ...
    (field_name, field_name_md) <- parse_field_name        -- if field_name exists, not a literal, no predicate
    let bmd_field_name = get_md_header field_name_md
    ... 
    md_i <- parse_i                                        -- no field name, literal field, no predicate
    let bmd_i = get_md_header md_i
    ...
    (rep_j,md_j) <- parse_j                                -- no field name, not literal, no predicate
    let bmd_j = get_md_header md_j

    let top_md = mergeBaseMDs [bmd_1,...bmd_n]
    let name_md = Name_md{name_1 = field_name_md, ... }
    return (rep,(top_md,name_md))
-}

mkParseRecord :: String -> [(Maybe String, PadsTy, Maybe TH.Exp)] -> Q TH.Exp
mkParseRecord str fields = do
  (repEs,mdEs,bmdEs, stmts) <- mkParseFields fields
  let tyName             = mkName str
  let top_md             = mkName "top_md"
  let (top_mdE, top_mdP) = genPE top_md
  let headerE            = AppE (VarE 'mergeBaseMDs) (ListE bmdEs)
  let mdS                = LetS [ValD top_mdP (NormalB headerE) []]
  let repE               = RecConE tyName repEs
  let inner_md_name      = getStructInnerMDName tyName   -- ty name is the same as the declared pads type name
  let mdE                = TupE [top_mdE, RecConE inner_md_name mdEs]
  let resultE            = TupE [repE,mdE]
  let finalS             = NoBindS (AppE (VarE 'return) resultE)
  return (DoE (stmts ++ [mdS,finalS]))

{- XXX
    - Why can't predicates modify unamed fields?
    - Can we rewrite these blocks in Haskell code?
    - TEST: meta-data field names are not in scope in predicates.  Change to match forest code.
-}
mkParseField :: (Maybe String, PadsTy, Maybe TH.Exp) -> Q ([TH.FieldExp], [TH.FieldExp], TH.Exp, [Stmt])
mkParseField (labelM, ty, predM) = do
   repName     <- case labelM of { Nothing -> genRepName; Just str -> return $ getFieldName   str}
   mdName      <- case labelM of { Nothing -> genMdName;  Just str -> return $ getFieldMDName str}
   bmdName     <- genBMdName 
   let (repE, repP) = genPE repName
   let ( mdE,  mdP) = genPE mdName
   let (bmdE, bmdP) = genPE bmdName
   rhsE        <- parseE ty
   case (labelM,predM) of 
    (Nothing, Just p)      ->  error "Predicates cannot modify unnamed fields in records."
    (Nothing, Nothing)      ->  let                                         -- Parse unnamed, non-literal struct field
       stmt1 = BindS (TupP [repP,mdP]) rhsE                                    -- rep and md exist for non-literal types
       stmt2 = LetS [ValD bmdP (NormalB (AppE (VarE 'get_md_header) mdE)) []]  -- Read out header of resulting parse descriptor
       in return([], [], bmdE, [stmt1,stmt2])                                  -- No rep or md to include in result
    (Just str, Nothing)    -> let                                          -- Parse named, non-literal struct field, no predicate
       stmt1 = BindS (TupP [repP,mdP]) rhsE                                    -- rep and md exist for non-literal types
       stmt2 = LetS [ValD bmdP (NormalB (AppE (VarE 'get_md_header) mdE)) []]  -- Read out header of resulting parse descriptor
       in return([(repName,repE)], [(mdName,mdE)], bmdE, [stmt1,stmt2])       -- Include named rep and md in result
    (Just str, Just pred)    -> do                                         -- Parse named, non-literal struct field, predicate
      final_mdName    <- genMdName
      raw_bmdName     <- genBMdName 
      let (finalMDE, finalMDP)   = genPE final_mdName
      let (rawBMDE, rawBMDP) = genPE raw_bmdName
      let predTestE      = TH.CondE pred rawBMDE (AppE (VarE 'addPredFailureMD) rawBMDE)    -- if pred then rawBMD else addPredFailureMD rawBMD
      let replaceHeaderE = AppE (AppE (VarE 'replace_md_header) mdE) bmdE                -- replace_md_header rawMD bmd
      let stmt1 = BindS (TupP [repP,mdP]) rhsE
      let stmt2 = LetS [ValD rawBMDP (NormalB (AppE (VarE 'get_md_header) mdE)) []]
      let stmt3 = LetS [ValD bmdP (NormalB predTestE)  []] 
      let stmt4 = LetS [ValD finalMDP  (NormalB replaceHeaderE) []]
      return ([(repName,repE)], [(mdName,finalMDE)], bmdE, [stmt1,stmt2,stmt3,stmt4])       -- Include named rep and md in result

mkParseFields :: [(Maybe String, PadsTy, Maybe TH.Exp)] -> Q ([FieldExp], [FieldExp], [TH.Exp], [Stmt])
mkParseFields [] = return ([],[],[],[])
mkParseFields (field:fields) = do
  (rep_field,   md_field,  bmd_field,  stmts_field)  <- mkParseField  field
  (reps_fields, md_fields, bmd_fields, stmts_fields) <- mkParseFields fields
  return (rep_field++reps_fields, md_field++md_fields, bmd_field:bmd_fields, stmts_field++stmts_fields)

addPredFailureMD :: Base_md -> Base_md
addPredFailureMD (Base_md{numErrors, errInfo}) = 
  let errInfo' = case errInfo of
                  Nothing -> E.ErrInfo {msg = E.FPredicateFailure, position = Nothing}
                  Just e ->  e
  in Base_md{numErrors = numErrors + 1, errInfo = Just errInfo'}
       
       
{- 
   stmts to parse each element of tuple:
   do
    (rep_1,md_1) <- parse_1
    let bmd_1 = get_md_header md_1
    ...
    (rep_n,md_n) <- parse_n
    let bmd_n = get_md_header md_n
    let top_md = mergeBaseMDs [bmd_1,...bmd_n]
    return (rep,(top_md,(md_1,...,md_n)))
-}

mkParseTuple :: [PadsTy] -> Q TH.Exp
mkParseTuple tys = do
  (repEs,mdEs,bmdEs, stmts) <- mkParseTupleB tys
  let top_md             = mkName "top_md"
  let (top_mdE, top_mdP) = genPE top_md
  let headerE            = AppE (VarE 'mergeBaseMDs) (ListE bmdEs)
  let mdS                = LetS [ValD top_mdP (NormalB headerE) []]
  let repE               = TupE repEs
  let mdE                = TupE [top_mdE, TupE mdEs]
  let resultE            = TupE [repE,mdE]
  let finalS             = NoBindS (AppE (VarE 'return) resultE)
  return (DoE (stmts ++ [mdS,finalS]))

mkParseTupleB :: [PadsTy] -> Q ([TH.Exp], [TH.Exp], [TH.Exp], [Stmt])
mkParseTupleB [] = return ([],[],[],[])
mkParseTupleB (ty:tys) = do
  (rep_ty,   md_ty,  bmd_ty,  stmt_ty)  <- mkParseTyB ty
  (reps_tys, md_tys, bmd_tys, stmt_tys) <- mkParseTupleB tys
  return (rep_ty++reps_tys, md_ty++md_tys, bmd_ty:bmd_tys, stmt_ty++stmt_tys)

{- Input:
     PadsTy: type we are generating parsing instructions for
   Output:
     [TH.Exp]: list of expressions that store parse results (can be empty)
      TH.Exp : expression that stores meta data result 
      TH.Exp : expression that stores base level meta data 
     [Stmt]  : list of statements to do parsing for PadsTy.

     (rep,md) <- parseE
     bmd <- get_md_header md

-}
mkParseTyB :: PadsTy -> Q ([TH.Exp], [TH.Exp], TH.Exp, [Stmt])
mkParseTyB ty = do
   repName     <- genRepName 
   mdName      <- genMdName  
   bmdName     <- genBMdName 
   let (repE, repP) = genPE repName
   let ( mdE,  mdP) = genPE mdName
   let (bmdE, bmdP) = genPE bmdName
   rhsE        <- parseE ty
   let (resultEs, resultMDEs) =  case ty of
        Plit l ->    ([],[])
        otherwise -> ([repE], [mdE])
   let stmt1    = BindS (TupP [repP,mdP]) rhsE
   let stmt2    = LetS [ValD bmdP (NormalB (AppE (VarE 'get_md_header) mdE)) []]
   return (resultEs, resultMDEs,bmdE,[stmt1,stmt2])


{- Printing Functions -}
--   printBS :: [Dec]           <- genPadsPrintBS p_name print_name    ty_name md_ty_name padsTy arg_info_opt

{-
accumulator: String -> String
when apply to a string, it appends a string on the front of whatever you apply it to

let p = \x . "hello world" ++ x
let q = \y -> "holiday" ++ y

new accumulator is: p . q
left-linear tree of compositions
apply accumulator to end of string
associativity for composition starts building string up over one one pass.

define own datatype
 binary tree datatype w/strings at the leaves; want to keep it relatively balanced, an AVL tree (maybe in library)
 put strings on the end, then you could start putting strings 

pair of lists to encode a queue
-}

genPadsPrintBS :: String -> Name ->    Name ->  Name -> PadsTy -> Maybe (TH.Pat, TH.Type) -> Q [Dec]
genPadsPrintBS    p_name    print_name rep_name pd_name padsTy mpat_info = do 
   core_bodyE <- printE padsTy
   let core_ty = arrowTy (AppT (AppT (TupleT 2) (ConT rep_name)) (ConT pd_name)) (arrowTy (ConT (mkName "B.ByteString")) (ConT (mkName "B.ByteString")))
   let (bodyE,ty) = case mpat_info of
                     Nothing -> (core_bodyE, core_ty)
                     Just (pat,pat_ty) -> ( LamE [pat] core_bodyE,
                                            arrowTy pat_ty core_ty)
   let sigD = SigD print_name ty
   let funD = ValD (VarP print_name) (NormalB bodyE) []
   return [sigD, funD]

printE :: PadsTy -> Q TH.Exp
printE ty = return (LamE [VarP (mkName "temp")] (VarE(mkName "undefined")))




{- Name manipulation functions -}
genUniqueName base = newName base
genRepName = genUniqueName "rep" 
genMdName  = genUniqueName "md" 
genBMdName = genUniqueName "bmd"
getMDName pname = case M.lookup pname baseTypesMap of
         Nothing -> mkName ((strToUpper pname) ++ "_md")
         Just _ -> ''Base_md                  -- Built-in base type        
getStructInnerMDName name = 
  let str = show name
  in mkName (str++"_inner_md")
getFieldMDName str = mkName (str++"_md")
getFieldName str = mkName str

getBranchMDNameU str = mkName ((strToUpper str)++"_md")
getBranchNameU str = mkName (strToUpper str)

getBranchMDNameL str = mkName ((strToLower str)++"_md")
getBranchNameL   str = mkName  (strToLower str)

getTyName pname = mkName  (strToUpper pname)

getParseName pname = mkName ((strToLower pname) ++ "_parseM")
getParseSName pname = mkName ((strToLower pname) ++ "_parseS")

getPrintBSName pname = mkName ((strToLower pname) ++ "_printBS")




